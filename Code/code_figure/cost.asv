%% Cost function
function [F] = cost(n, array_design)
lambda1 = 1;
phi0 = 0*pi/180; 
theta0 = 0*pi/180;  
eps = 0.0001; 
phi = linspace(-pi/2,pi/2,360) ; 
theta = linspace(-pi/2,pi/2,360) ; 
F = zeros(1,n);
SLL
for k = 1:n
    virtual = array_design{1,k};
    virtual_array = virtual(1,:)+sqrt (-1) .*virtual(2,:); 
    for i = 1:length (phi)
        for j = 1:length(theta)  
            pattern0 = exp(sqrt (-1) *2*pi/lambda1*(sin (phi(i))... 
            *cos (theta(j))*real(virtual_array)+sin(theta(j))*imag(virtual_array))... 
            -sin(phi0) *cos(theta0) *real (virtual_array) -sin(theta0) *imag (virtual_array)); 
            pattern(i,j) = sum(sum(pattern0) ); 
        end 
    end 
    max_p = max(max(abs (pattern))); 
    pattern_dbw = 20*log10(abs(pattern)/max_p+eps); 
    number = find(pattern_dbw<-50); 
    g_temp = -50+unifrnd(-1,1,1,length(number)); 
    for j = 1:length(number) 
        pattern_dbw(number(j)) = g_temp(j); 
    end
    temp1 = pattern_dbw(:, round (360* ((pi/2-theta0)/pi)));
    [SLL_azi] = sidelobe_peak(temp1);
    temp2 = pattern_dbw (round (360* ((pi/2-phi0)/pi)),:);
    [SLL_ele] = sidelobe_peak(temp2);
    BW = temp1(161,1)+temp1(201,1);
    F(1,k) = SLL_azi+BW;
end
end